/*
Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The cell itself does not count as an adjacent cell. 
The same letter cell may be used more than once.

Example :

Given board =

[
  ["ABCE"],
  ["SFCS"],
  ["ADEE"]
]
word = "ABCCED", -> returns 1,
word = "SEE", -> returns 1,
word = "ABCB", -> returns 1,
word = "ABFSAB" -> returns 1
word = "ABCD" -> returns 0
Note that 1 corresponds to true, and 0 corresponds to false.
*/

//We will solve this using DFS , since a letter can be used more than once hence no need to maintain
//visited array . At any point we keep track of the last letter matched , if we have matched the last position
//that is at n-1 , then means we have found the whole word
//At any position which is same as the starting position , we run DFS from there and if we are able to match
//all characters from this start we return true , else look for another starting point. Simple ! :P
int r[]={0,1,-1,0};
int c[]={1,0,0,-1};
bool isSafe(int x,int y,int n,int m) //to check whether we can even choose this or not
{
    return x>=0&&y>=0&&x<n&&y<m;
}
int util(string input,int n,int index,int x,int y,vector<string> A) //index variabel keeps the track of last variable matched
{
    if(index==n-1) //the last index matched was n-1, so now stop , we have found the word
    {
        return 1;
    }
    for(int i=0;i<4;i++)
    {
        int nx=x+r[i];
        int ny=y+c[i];
        //check if the element we choosing is safe and is equal to the next char to be matched
        if(isSafe(nx,ny,A.size(),A[0].size())&&A[nx][ny]==input[index+1])
        {
            if(util(input,n,index+1,nx,ny,A)==1) return 1;
        }
    }
    return 0;
}
int Solution::exist(vector<string> &A, string B) 
{
    for(int i=0;i<A.size();i++)
    {
        for(int j=0;j<A[i].length();j++)
        {
            if(A[i][j]==B[0]) //this can be the required start 
                              //do dfs from here and see how many char you can match
            {
                if(util(B,B.length(),0,i,j,A)==1)
                return 1;
                //else look for another start :/ 
            }
        }
    }
    return 0;
}
