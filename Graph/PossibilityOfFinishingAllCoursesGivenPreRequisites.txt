 /*
 There are a total of N courses you have to take, labeled from 1 to N. Some courses may have prerequisites, for example to take course 2 you have to first take course 1, which is expressed as a pair: [1,2]. 
 Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses. return 1/0 if it is possible/not possible.
 The list of prerequisite pair are given in two integer arrays B and C where B[i] is a prerequisite for C[i].

 Example: If N = 3 and the prerequisite pairs are [1,2] and [2,3], then you can finish courses in the following order: 1, 2 and 3. But if N = 2 and the prerequisite pairs are [1,2] and [2,1], then it is not possible for you to finish all the courses. 
 */

//Use the concept of Topological Sort,if a course u has to be done before v
//make a edge from u to v
//apply Topological sort now 
//After applying this sorting for each combination of u and v check whether
//position of course u is before that of v or not
//If no , return false
class Graph
{
    public:
    unordered_map<int,vector<int>> adjList;
    void addEdge(int u,int v)
    {
        adjList[u].push_back(v);
    }
    void print()
    {
        for(auto i=adjList.begin();i!=adjList.end();i++)
        {
            cout<<i->first<<"->";
            for(int j=0;j<i->second.size();j++)
            {
                cout<<i->second[j]<<" ";
            }
            cout<<'\n';
        }
    }
};
void topologicalSort(Graph g,vector<int>& visited,int node,int index,unordered_map<int,int>& dependencyOrder)
{
    visited[node]=1;
    for(int i=0;i<g.adjList[node].size();i++)
    {
        if(visited[g.adjList[node][i]]==0)
        {
            topologicalSort(g,visited,g.adjList[node][i],index+1,dependencyOrder);
        }
    }
    //mark the index of this node
    dependencyOrder[node]=index;
}
int Solution::solve(int A, vector<int> &B, vector<int> &C) 
{
    Graph g;
    unordered_map<int,int> dependencyOrder;//stores the final position of each course after topological sort
    vector<int> visited(A+1,0);
    //make tge graph
    for(int i=0;i<B.size();i++)
    {
        g.addEdge(B[i],C[i]);
    }
    //g.print();
    int index=0;
    //apply topological sort , there is only 1 connected componant here always
    topologicalSort(g,visited,1,index,dependencyOrder);
    // for(auto i=dependencyOrder.begin();i!=dependencyOrder.end();i++)
    //     {
    //         cout<<i->first<<" at position "<<i->second<<'\n';
    //     }
    for(int i=0;i<B.size();i++)
    {
        //B[i] need to be done before C[i]
        //but after topological sort , B[i] comes after C[i] , hence return false
        if(dependencyOrder[B[i]]>dependencyOrder[C[i]])
        {
            return 0;
        }
    }
    return 1;
}
