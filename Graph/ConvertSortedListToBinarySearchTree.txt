/*
Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

 A height balanced BST : a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1. 
Example :


Given A : 1 -> 2 -> 3
A height balanced BST  :

      2
    /   \
   1     3
*/


/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

 
//At each point , we would make the mid as root and adn then recursively call for the 
//left linked list and right linked list which is left . We divide the linked list into 3 parts
//at each step left,mid,right , make the mid as root , and call recursion in left and right.
TreeNode* Solution::sortedListToBST(ListNode* head) 
{
    if(head==NULL)
    {
        return NULL;
    }
    if(head->next==NULL) //only one node , make its Tree node and return it
    {
        return new TreeNode(head->val);
    }
    ListNode* prev=NULL;
    ListNode* slow=head;
    ListNode* fast=head;
    while(fast!=NULL&&fast->next!=NULL)
    {
        prev=slow;
        slow=slow->next;
        fast=fast->next->next;
    }
    //Divide the linked list into 2 seperate linked lists
    //one from head to prev and other from slow->next to last node
    //the node at mid i.e at slow will become root at each step.
    ListNode* head2=slow->next;
    slow->next=NULL;
    prev->next=NULL;
    TreeNode* root=new TreeNode(slow->val); //making the mod node as root
    root->left=sortedListToBST(head); //get BST of the left linkedList and make it left of root
    root->right=sortedListToBST(head2); //get BST of the right linkedList and make it right of root
    return root;
}
