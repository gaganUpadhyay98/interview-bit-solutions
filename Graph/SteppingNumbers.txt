/*
Given N and M find all stepping numbers in range N to M

The stepping number:

A number is called as a stepping number if the adjacent digits have a difference of 1.
e.g 123 is stepping number, but 358 is not a stepping number

Example:

N = 10, M = 20
all stepping numbers are 10 , 12 
Return the numbers in sorted order.
*/

//This is also an application of BFS
//Take empty queue initially and push all the number from 1 to 9
//When popping from queue , check whether in range , if yes , then its part of answer
//and make 2 possible numbers from this number just popped out.
vector<int> Solution::stepnum(int A, int B) {
    queue<int> q;
    vector<int> ans;
    if(A==0)
    {
        ans.push_back(0);
    }
    for(int i=1;i<=9;i++)
    {
        q.push(i);
    }
    while(q.empty()!=true)
    {
        int num=q.front();
        //cout<<num<<'\n';
        q.pop();
        if(num<=B) //check whether number in range
        {
            if(num>=A) //check whether number in range
                ans.push_back(num);
            if(num%10==0) //ending with 0
            {
                q.push(num*10+1);
            }
            else if(num%10==9) //ending with 9
            {
                q.push(num*10+8);
            }
            else
            {                   //any other number
                int rem=num%10;
                q.push(num*10+(rem+1));
                q.push(num*10+(rem-1));
            }
        }
    }
    sort(ans.begin(),ans.end());
    return ans;
}
